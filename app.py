import streamlit as st
import sys
import os
from pathlib import Path

# Adiciona o diret√≥rio src ao path para importar os m√≥dulos
sys.path.append('src')

from graph import run_research, knowledge_graph
from graph_visualization import (
    create_interactive_graph_visualization,
    display_knowledge_graph_stats,
    display_top_concepts,
    display_suggestions
)

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="AI Research Agent com Mapa de Conhecimento",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Inicializar session state
if 'suggested_query' not in st.session_state:
    st.session_state['suggested_query'] = ""

# T√≠tulo principal
st.title("üß† AI Research Agent com Mapa de Conhecimento")
st.markdown("---")

# Abas principais
tab1, tab2, tab3 = st.tabs(["üîç Pesquisar", "üß† Mapa de Conhecimento", "üìä Estat√≠sticas"])

with tab1:
    # Sidebar com informa√ß√µes
    with st.sidebar:
        st.header("‚ÑπÔ∏è Sobre")
        st.markdown("""
        Este agente de pesquisa utiliza IA para:
        - Gerar consultas de pesquisa relevantes
        - Buscar informa√ß√µes online
        - Sintetizar resultados
        - **Construir mapa de conhecimento interativo**
        - Fornecer sugest√µes de t√≥picos relacionados
        """)
        
        st.header("üõ†Ô∏è Tecnologias")
        st.markdown("""
        - **LangGraph**: Orquestra√ß√£o de agentes
        - **Lista de Adjac√™ncia**: Estrutura de dados para grafo
        - **NetworkX + Plotly**: Visualiza√ß√£o interativa
        - **Ollama**: Modelos de linguagem locais
        - **Tavily**: API de busca web
        - **Streamlit**: Interface de usu√°rio
        """)
        
        # Estat√≠sticas r√°pidas do grafo
        st.header("üìà Grafo Atual")
        stats = knowledge_graph.get_graph_stats()
        st.metric("Conceitos", stats["total_concepts"])
        st.metric("Conex√µes", stats["total_connections"])

    # Interface principal
    st.header("üìù Fa√ßa sua pergunta")

    # Verificar se h√° sugest√£o do mapa de conhecimento
    suggested_query = st.session_state.get('suggested_query', "")
    
    # Input do usu√°rio
    user_query = st.text_area(
        "Digite sua pergunta ou t√≥pico de pesquisa:",
        height=100,
        value=suggested_query,
        placeholder="Ex: Quais s√£o as √∫ltimas tend√™ncias em intelig√™ncia artificial para 2024?"
    )
    
    # Limpar sugest√£o ap√≥s usar
    if suggested_query:
        st.session_state['suggested_query'] = ""

    # Bot√µes de controle
    col1, col2 = st.columns([1, 4])
    with col1:
        search_button = st.button("üîç Pesquisar", type="primary")
    with col2:
        clear_button = st.button("üóëÔ∏è Limpar")

    # Limpar campos
    if clear_button:
        st.rerun()

    # Processar pesquisa
    if search_button and user_query:
        if user_query.strip():
            try:
                # Mostrar indicador de progresso
                with st.spinner("üîç Pesquisando e construindo mapa de conhecimento..."):
                    # Executar a pesquisa
                    result = run_research(user_query.strip())
                
                # Exibir resultado
                st.markdown("---")
                st.header("üìä Resultado da Pesquisa")
                
                # Container para o resultado
                with st.container():
                    st.markdown(result)
                    
                # Exibir sugest√µes se dispon√≠veis
                st.markdown("---")
                latest_stats = knowledge_graph.get_graph_stats()
                if latest_stats["total_concepts"] > 0:
                    # Gerar sugest√µes baseadas no grafo atual
                    all_concepts = list(knowledge_graph.concept_frequency.keys())
                    suggestions = knowledge_graph.suggest_next_research(all_concepts[-5:], limit=3)
                    display_suggestions(suggestions)
                    
            except Exception as e:
                st.error(f"‚ùå Erro durante a pesquisa: {str(e)}")
                st.info("üí° Verifique se:")
                st.markdown("""
                - As vari√°veis de ambiente est√£o configuradas corretamente
                - A API do Tavily est√° funcionando
                - Os modelos do Ollama est√£o dispon√≠veis
                """)
        else:
            st.warning("‚ö†Ô∏è Por favor, digite uma pergunta v√°lida.")

    elif search_button:
        st.warning("‚ö†Ô∏è Por favor, digite uma pergunta antes de pesquisar.")

with tab2:
    st.header("üß† Mapa de Conhecimento Interativo")
    st.markdown("*Visualiza√ß√£o baseada em Lista de Adjac√™ncia*")
    
    # Controles do mapa
    col1, col2, col3 = st.columns([2, 2, 2])
    with col1:
        min_weight = st.slider("Peso m√≠nimo das conex√µes", 0.5, 5.0, 1.0, 0.5)
    with col2:
        if st.button("üîÑ Atualizar Mapa"):
            st.rerun()
    with col3:
        if st.button("üóëÔ∏è Limpar Grafo"):
            knowledge_graph.adjacency_list.clear()
            knowledge_graph.concept_frequency.clear()
            knowledge_graph.concept_contexts.clear()
            knowledge_graph.save_to_file("knowledge_graph.json")
            st.success("Grafo limpo com sucesso!")
            st.rerun()
    
    # Visualiza√ß√£o principal
    try:
        fig = create_interactive_graph_visualization(knowledge_graph, min_weight)
        if fig:
            # Exibir o grafo
            st.plotly_chart(fig, use_container_width=True)
            
            # Informa√ß√µes sobre interatividade
            st.info("""
            üñ±Ô∏è **Como usar o mapa:**
            - **Hover**: Passe o mouse sobre os n√≥s para ver detalhes
            - **Zoom**: Use a roda do mouse ou controles para ampliar
            - **Pan**: Clique e arraste para mover o mapa
            - **Tamanho do n√≥**: Representa a frequ√™ncia do conceito
            - **Cor do n√≥**: Representa a import√¢ncia/centralidade
            """)
            
        else:
            st.info("üîç **Fa√ßa algumas pesquisas primeiro para ver o mapa de conhecimento!**")
            st.markdown("""
            O mapa ser√° constru√≠do automaticamente conforme voc√™ faz pesquisas.
            Cada pesquisa extrai conceitos e cria conex√µes usando **Lista de Adjac√™ncia**.
            """)
            
    except Exception as e:
        st.error(f"Erro ao criar visualiza√ß√£o: {str(e)}")

with tab3:
    st.header("üìä Estat√≠sticas do Conhecimento")
    
    # Estat√≠sticas principais
    display_knowledge_graph_stats(knowledge_graph)
    
    st.markdown("---")
    
    # Conceitos mais frequentes
    col1, col2 = st.columns([1, 1])
    
    with col1:
        display_top_concepts(knowledge_graph)
    
    with col2:
        st.subheader("üîó Estrutura da Lista de Adjac√™ncia")
        
        # Mostrar exemplo da estrutura de dados
        if knowledge_graph.adjacency_list:
            st.markdown("**Exemplo da estrutura interna:**")
            
            # Pegar alguns conceitos para mostrar
            sample_concepts = list(knowledge_graph.adjacency_list.keys())[:3]
            
            for concept in sample_concepts:
                connections = knowledge_graph.adjacency_list[concept]
                st.markdown(f"**{concept}** ‚Üí [")
                for conn in connections[:3]:  # Mostrar apenas 3 conex√µes
                    st.markdown(f"  ‚Ä¢ {conn.target} (peso: {conn.weight:.1f})")
                if len(connections) > 3:
                    st.markdown(f"  ... e mais {len(connections) - 3} conex√µes")
                st.markdown("]")
                st.markdown("")
            
        else:
            st.info("A Lista de Adjac√™ncia ainda est√° vazia. Fa√ßa algumas pesquisas!")

# Rodap√©
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666;'>
        Desenvolvido com ‚ù§Ô∏è usando Streamlit, LangGraph e <strong>Lista de Adjac√™ncia</strong>
    </div>
    """,
    unsafe_allow_html=True
)